// Code generated by statik. DO NOT EDIT.

// Package contains static assets.
package embed

var	Asset = "PK\x03\x04\x14\x00\x08\x00\x00\x00\xa4\x95~O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00	\x00client.elm.tmplUT\x05\x00\x01\xb4\xb8\xe2]<%define \"client\"%>\n<%- if .Services %>\n-- CLIENT\n\n<% range .Services %>\n<%- $serviceName := .Name -%>\n<%- range .Methods %>\n<%- if .Outputs%>\ntype alias <%$serviceName%><% .Name.TitleUpcase %>Data =\n    {<% range $index, $element := .Outputs %><%commaAfterFirst $index%> <%if .Optional%>Maybe <%end%><%.Name | safeVarName%> : <% fieldType .Type %> \n    <%end%>}  \n<%- end%>\n\n<% $serviceName.TitleDowncase %><%.Name%> : \n    <% range $index, $element := .Inputs %>\n    <%- if $index | ne 0 %>-> <%end%><%if .Optional%>Maybe <%end%><% .Type | fieldType %>\n    <%end%>\n    \n    <%- if .Inputs%>-> <%end%>\n    \n    <%- if .Outputs -%>\n    (Result Http.Error <%$serviceName%><% .Name.TitleUpcase %>Data -> msg)\n    -> Cmd msg\n\n    <%- else -%>\n    (Result Http.Error () -> msg) \n    -> Cmd msg\n    <%- end %> \n<% $serviceName.TitleDowncase %><%.Name%><% range .Inputs %> <%.Name | safeVarName%><%end%> toMsg =\n    <%- if or .Inputs .Outputs%>\n    let\n        <%- if .Inputs%>\n        encoder =\n            Encode.object\n                [<% range $index, $element := .Inputs %><% commaAfterFirst $index %> ( \"<%.Name%>\", <% methodArgumentEncoderType . %> <%.Name | safeVarName%> )\n                <%end%>]\n        <%end%>\n        <%- if .Outputs%>\n        decoder =\n            Decode.succeed <%$serviceName%><% .Name.TitleUpcase %>Data\n            <%- range .Outputs %>\n                |> andMap (Decode.<%if .Optional%>optionalField<%else%>field<%end%> \"<%.Name%>\" <%.Type | decoderType%>)\n            <%- end %>              \n        <%- end%>        \n    in\n    <%- end%>\n    Http.post\n        { url = \"/rpc/<%$serviceName%>/<%.Name%>\"\n        <%- if .Inputs %> \n        , body = Http.jsonBody encoder\n        <%- else %>\n        , body = Http.emptyBody\n        <%- end %>\n        <%- if .Outputs %>\n        , expect = Http.expectJson toMsg decoder\n        <%- else %>\n        , expect = Http.expectWhatever toMsg\n        <%- end %>\n        }\n<% end %>     \n<%- end %>   \n<%- end %>    \n<%- end %>    PK\x07\x08,\x9br\x88\xd0\x07\x00\x00\xd0\x07\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00m\xbc\x87O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00	\x00decoders.elm.tmplUT\x05\x00\x01?7\xec]<%define \"decoders\"%>\n-- DECODERS\n<% if .Messages%>\n<%- range .Messages%>\n<%- if .Type | isEnum %>\n<%- $enumName := .Name %>\n<%.Name | messageDecoderName %> : Decoder <%.Name%>\n<%.Name | messageDecoderName %> =\n    let\n        enumDecoder s =\n            case s of\n                <%- range .Fields %>\n                \"<%.Value%>\" ->\n                    Decode.succeed <%$enumName%><%.Name%>\n                <%- end%> \n                _ ->\n                    Decode.fail (\"unknown value for type <%.Name%> : '\" ++ s)\n    in\n    Decode.string |> Decode.andThen enumDecoder     \n<% else if .Type | isStruct %>\n<%.Name | messageDecoderName %> : Decoder <%.Name%>\n<%.Name | messageDecoderName %> =\n    Decode.succeed <%.Name%>\n    <%- range .Fields %>\n        |> andMap (<%if .Optional%>optionalField<%else%>Decode.field<%end%> \"<%. | exportedJSONField%>\" <%.Type | decoderType%>)\n    <%- end %>\n<% end %>\n<%- end %>\n<%- end %>\n<%- end %>PK\x07\x08\xb9D\xad7\xa7\x03\x00\x00\xa7\x03\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00\xc1\xbd\x87O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00	\x00encoders.elm.tmplUT\x05\x00\x01\xbb9\xec]<%define \"encoders\"%>\n-- ENCODERS\n<% if .Messages%>\n<%- range .Messages%>\n<%- if .Type | isEnum %>\n<%- $enumName := .Name %>\n<%.Name | messageEncoderName %> : <%.Name%> -> Encode.Value\n<%.Name | messageEncoderName %> <%.Name.TitleDowncase%> =\n    case <%.Name.TitleDowncase%> of\n    <%- range .Fields %>\n        <%$enumName%><%.Name%> ->\n            Encode.string \"<%.Value%>\"\n    <% end%> \n<%- else if .Type | isStruct %>\n<%- $messageVarName := .Name.TitleDowncase %>\n<%.Name | messageEncoderName %> : <%.Name%> -> Encode.Value\n<%.Name | messageEncoderName %> <% $messageVarName %> =\n    Encode.object\n        [<% range $index, $element := .Fields %><% commaAfterFirst $index %> ( \"<% . | exportedJSONField %>\", <% . | messageFieldEncoderType %> <% $messageVarName %>.<% . | exportedField %> )\n        <%end%>]\n<% end %>\n<%- end %>\n<%- end %>\n<%- end %>PK\x07\x08\xda\xe0\xc6\x94V\x03\x00\x00V\x03\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00\xe8\xb2}O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00	\x00helpers.elm.tmplUT\x05\x00\x01T\x9a\xe1]<%define \"helpers\"%>\n-- HELPERS\n\nandMap : Decoder a -> Decoder (a -> b) -> Decoder b\nandMap =\n    Decode.map2 (|>)\n\noptionalField : String -> Decoder a -> Decoder (Maybe a)\noptionalField fieldName decoder =\n    let\n        finishDecoding json =\n            case Decode.decodeValue (Decode.field fieldName Decode.value) json of\n                Ok val ->\n                    Decode.map Just (Decode.field fieldName decoder)\n\n                Err _ ->\n                    Decode.succeed Nothing\n    in\n    Decode.value\n        |> Decode.andThen finishDecoding\n\nencodeMaybe : (a -> Encode.Value) -> Maybe a -> Encode.Value\nencodeMaybe encoder =\n    Maybe.map encoder >> Maybe.withDefault Encode.null\n\n\n\n<% end %> PK\x07\x08\xe8\xc9\x04c\xc4\x02\x00\x00\xc4\x02\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00\xe9\x80~O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00	\x00proto.gen.elm.tmplUT\x05\x00\x01\xb6\x93\xe2]<%- define \"proto\" -%>\nmodule <%.TargetOpts.PkgName%> exposing (<%.WebRPCSchema | exposingDef%>)\n\n{- <%.Name%> <%.SchemaVersion%>\n  --\n  This file has been generated by https://github.com/webrpc/webrpc using gen/elm\n  Do not edit by hand. Update your webrpc schema and re-generate.\n-}\n\nimport Http\nimport Json.Decode as Decode exposing (Decoder)\nimport Json.Encode as Encode\n\n<%template \"types\" .%>\n<%template \"decoders\" .%>\n<%template \"encoders\" .%>\n<%template \"client\" .%>\n<%template \"helpers\" .%>\n<%- end%>PK\x07\x08R\xd3ZX\xfd\x01\x00\x00\xfd\x01\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00\x0f\xbc\x87O\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00	\x00types.elm.tmplUT\x05\x00\x01\x8e6\xec]<%define \"types\"%>\n-- TYPES\n<%- if .Messages%>\n<%- range .Messages%>\n<% if .Type | isEnum %>\n<%- $enumName := .Name %>\ntype <%$enumName%>\n<%- range $index, $element := .Fields %>\n    <% if $index | eq 0 %>=<%else%>|<%end%> <%$enumName%><%.Name%>\n<%- end%>\n<%- else if .Type | isStruct %>\ntype alias <%.Name%> =\n    {<% range $index, $element := .Fields %><% commaAfterFirst $index %> <% . | exportedField %> : <% if .Optional %>Maybe <% end %><% . | fieldTypeDef %>\n    <% end -%>}\n<%- end %>\n<%- end %>\n<%- end %>\n<%- end %>PK\x07\x08\x14W\x9c\xea\x0d\x02\x00\x00\x0d\x02\x00\x00PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xa4\x95~O,\x9br\x88\xd0\x07\x00\x00\xd0\x07\x00\x00\x0f\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x00\x00\x00\x00client.elm.tmplUT\x05\x00\x01\xb4\xb8\xe2]PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00m\xbc\x87O\xb9D\xad7\xa7\x03\x00\x00\xa7\x03\x00\x00\x11\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x16\x08\x00\x00decoders.elm.tmplUT\x05\x00\x01?7\xec]PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xc1\xbd\x87O\xda\xe0\xc6\x94V\x03\x00\x00V\x03\x00\x00\x11\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\x05\x0c\x00\x00encoders.elm.tmplUT\x05\x00\x01\xbb9\xec]PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xe8\xb2}O\xe8\xc9\x04c\xc4\x02\x00\x00\xc4\x02\x00\x00\x10\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\xa3\x0f\x00\x00helpers.elm.tmplUT\x05\x00\x01T\x9a\xe1]PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xe9\x80~OR\xd3ZX\xfd\x01\x00\x00\xfd\x01\x00\x00\x12\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\xae\x12\x00\x00proto.gen.elm.tmplUT\x05\x00\x01\xb6\x93\xe2]PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\x0f\xbc\x87O\x14W\x9c\xea\x0d\x02\x00\x00\x0d\x02\x00\x00\x0e\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x81\xf4\x14\x00\x00types.elm.tmplUT\x05\x00\x01\x8e6\xec]PK\x05\x06\x00\x00\x00\x00\x06\x00\x06\x00\xab\x01\x00\x00F\x17\x00\x00\x00\x00"
