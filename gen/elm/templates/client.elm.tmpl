<%define "client"%>
<%- if .Services %>

-- CLIENT

request
    : ConfigModel
    -> { method : String
       , headers : List Http.Header
       , url : String
       , body : Http.Body
       , expect : Http.Expect msg
       , timeout : Maybe Float
       , tracker : Maybe String
       }
    -> Cmd msg
request config =
    if config.withCredentials then
        Http.riskyRequest
    else
        Http.request


<% range .Services %>
<%- $serviceName := .Name -%>
<%- range .Methods %>
<%- if .Outputs%>
type alias <%$serviceName%><% .Name.TitleUpcase %>Data =
    {<% range $index, $element := .Outputs %><%commaAfterFirst $index%> <%if .Optional%>Maybe <%end%><%.Name | safeVarName%> : <% fieldType .Type %> 
    <%end%>}  
<%- end%>

<% $serviceName.TitleDowncase %><%.Name%> :
    Config
    -> <% range $index, $element := .Inputs %>
    <%- if $index | ne 0 %>-> <%end%><%if .Optional%>Maybe <%end%><% .Type | fieldType %>
    <%end%>
    
    <%- if .Inputs%>-> <%end%>
    
    <%- if .Outputs -%>
    (Result Error <%$serviceName%><% .Name.TitleUpcase %>Data -> msg)
    -> Cmd msg

    <%- else -%>
    (Result Error () -> msg)
    -> Cmd msg
    <%- end %> 
<% $serviceName.TitleDowncase %><%.Name%> (Config config)<% range .Inputs %> <%.Name | safeVarName%><%end%> toMsg =
    <%- if or .Inputs .Outputs%>
    let
        <%- if .Inputs%>
        encoder =
            Encode.object
                [<% range $index, $element := .Inputs %><% commaAfterFirst $index %> ( "<%.Name%>", <% methodArgumentEncoderType . %> <%.Name | safeVarName%> )
                <%end%>]
        <%end%>
        <%- if .Outputs%>
        decoder =
            Decode.succeed <%$serviceName%><% .Name.TitleUpcase %>Data
            <%- range .Outputs %>
                |> andMap (Decode.<%if .Optional%>decodeOptionalField<%else%>field<%end%> "<%.Name%>" <%.Type | typeDecoder%>)
            <%- end %>              
        <%- end%>        
    in
    <%- end%>

    request config
        { method = "POST"
        , headers = []
        , url = config.baseUrl ++ "/rpc/<%$serviceName%>/<%.Name%>"
        <%- if .Inputs %>
        , body = Http.jsonBody encoder
        <%- else %>
        , body = Http.jsonBody (Encode.object [])
        <%- end %>
        <%- if .Outputs %>
        , expect = expectJson toMsg decoder
        <%- else %>
        , expect = Http.expectWhatever toMsg
        <%- end %>
        , timeout = Nothing
        , tracker = Nothing
        }

<% end %>     
<%- end %>   
<%- end %>    
<%- end %>


